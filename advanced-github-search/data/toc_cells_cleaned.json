{
    "repository_url": "https://github.com/pytopia/Python-Programming",
    "notebooks": {
        "downloaded_files/Lectures/01 Introduction/02 Programming Languages.ipynb": [
            "The First Programming Languages",
            "Types of Programming Languages",
            "Strengths and Applications",
            "Considerations for Choosing a Programming Language",
            "Learning a Programming Language",
            "The Evolution of Programming Languages"
        ],
        "downloaded_files/Lectures/01 Introduction/03 Why Choose Python.ipynb": [
            "Python's Simplicity and Versatility",
            "Strong Community and Support",
            "Cross-platform Compatibility",
            "Integration and Extensibility",
            "Gentle Learning Curve"
        ],
        "downloaded_files/Lectures/01 Introduction/04 Python Features and Applications.ipynb": [
            "Dynamic Typing and Automatic Memory Management",
            "Extensive Standard Library and Third-Party Packages",
            "Object-Oriented Programming (OOP)",
            "Multiplatform Support",
            "Web Development",
            "Data Analysis and Scientific Computing",
            "Machine Learning and Artificial Intelligence"
        ],
        "downloaded_files/Lectures/01 Introduction/05 How Long Does it Take to Learn Python.ipynb": [
            "Factors that Influence Learning Journey",
            "Learning Time Estimates"
        ],
        "downloaded_files/Lectures/01 Introduction/06 Python Versions.ipynb": [
            "Python 2",
            "Python 3",
            "Key Differences and Benefits of Python 3",
            "Conclusion"
        ],
        "downloaded_files/Lectures/01 Introduction/07 Effective Question Asking.ipynb": [
            "No Hello",
            "Don't Ask to Ask, Just Ask!",
            "The XY Problem",
            "Question Format",
            "Examples of Good and Bad Questions",
            "Bad Question #1",
            "Good Question #1",
            "Bad Question #2",
            "Good Question #2",
            "Bad Question #3",
            "Good Question #3"
        ],
        "downloaded_files/Lectures/02 Python Setup/01 Introduction to Python Development Environment.ipynb": [
            "Python Development Environment",
            "VS Code (Visual Studio Code)",
            "Jupyter Notebook",
            "Conda",
            "Benefits of using VS Code, Jupyter Notebook, and Conda together"
        ],
        "downloaded_files/Lectures/02 Python Setup/02 Operating Systems and Terminal Setup.ipynb": [
            "macOS",
            "Linux",
            "Windows and Windows Subsystem for Linux (WSL)",
            "Accessing the Terminal",
            "macOS",
            "Linux",
            "Windows Subsystem for Linux (WSL)"
        ],
        "downloaded_files/Lectures/02 Python Setup/03 How the File System Works in Unix-Based Systems.ipynb": [
            "The Root Directory",
            "Directory Structure",
            "Directory Tree Representation",
            "Difference from the Windows File System"
        ],
        "downloaded_files/Lectures/02 Python Setup/04 Command-Line Crash Course.ipynb": [
            "Why is the Terminal Important?",
            "Navigating the File System",
            "Working with Files and Directories",
            "Additional Useful Commands",
            "Tips and Tricks"
        ],
        "downloaded_files/Lectures/02 Python Setup/05 Installing VS Code.ipynb": [
            "Installing VS Code",
            "MacOS",
            "Linux",
            "WSL",
            "Open a remote folder or workspace",
            "How to Launch Visual Studio Code (VSCode) from Terminal",
            "Installing the Jupyter Extension"
        ],
        "downloaded_files/Lectures/02 Python Setup/06 Getting Started with Visual Studio Code.ipynb": [
            "Opening VS Code in Different Directories and Files",
            "Interface Tour",
            "Extensions",
            "Python Extension",
            "Jupyter Extension",
            "Basic Editing"
        ],
        "downloaded_files/Lectures/02 Python Setup/07 What is a Package Manager.ipynb": [
            "How Package Managers Work",
            "Scenario: Two People Creating Conda Environments",
            "Benefits of Using a Package Manager"
        ],
        "downloaded_files/Lectures/02 Python Setup/08 Installing Conda.ipynb": [
            "Understanding the Differences: Conda, Miniconda, and Anaconda",
            "Why Prefer Miniconda",
            "Installing miniconda with Command Line",
            "Linux and Windows Subsystem for Linux (WSL)",
            "macOS",
            "Step by Step Installation Guide for Installing Conda with Command Line",
            "Running Conda Initialization Manually",
            "Conclusion"
        ],
        "downloaded_files/Lectures/02 Python Setup/09 Python Package Management System.ipynb": [
            "Package Repository",
            "Conda vs. Pip",
            "PyPI vs. Conda Forge",
            "Dealing with PyPI-only Packages in Conda",
            "Which Should You Use?",
            "Python Environment and Package Management",
            "Key Components",
            "Python Environments",
            "Python Interpreter",
            "Packages and Dependencies",
            "Package Managers (pip and conda)",
            "Package Repositories (PyPI and Anaconda Channels)"
        ],
        "downloaded_files/Lectures/02 Python Setup/10 Managing Python Packages with Conda.ipynb": [
            "Conda Environments",
            "Creating a New Environment",
            "Activating and Deactivating Environments",
            "Listing Environments and Packages",
            "Removing Environments",
            "Installing and Managing Packages",
            "Installing Packages",
            "Installing Packages with pip",
            "Updating Packages",
            "Removing Packages",
            "Environment Files",
            "Exporting an Environment",
            "Creating an Environment from a File",
            "Best Practices"
        ],
        "downloaded_files/Lectures/02 Python Setup/11 Using Conda Environments in VS Code.ipynb": [
            "Installing the VS Code Extension",
            "Selecting a Conda Environment in VS Code",
            "Activating a Conda Environment in the Integrated Terminal"
        ],
        "downloaded_files/Lectures/02 Python Setup/12 Setting Up Jupyter Notebook with Conda.ipynb": [
            "Configuring Conda Environment",
            "Installing Jupyter Lab",
            "Using Jupyter Lab in VS Code",
            "Jupyter Lab vs. Jupyter Notebook",
            "Conclusion"
        ],
        "downloaded_files/Lectures/03 Getting Started/01 How to Download Source Code.ipynb": [
            "Method 1: Using the Download Button",
            "Step 1: Download the Repository ZIP",
            "Step 2: Extract the ZIP",
            "Step 3: Open the Project in VS Code",
            "Method 2: Using Git",
            "Step 1: Install Git (if not already installed)",
            "Step 2: Clone the Repository",
            "Step 3: Update the Repository",
            "Refreshing Files:"
        ],
        "downloaded_files/Lectures/04 Data Types/01 Basic Data Types.ipynb": [
            "Integers:",
            "No Real Length Limit",
            "Decimal Representation",
            "Number Bases",
            "Type of Integers",
            "Floating-Point Numbers",
            "Complex Numbers",
            "Strings",
            "Basic Representation of Strings",
            "Including Quotes in Strings",
            "Escape Sequences in Strings",
            "Suppressing Special Character Meaning",
            "Applying Special Meaning to Characters",
            "Raw Strings",
            "Triple-Quoted Strings",
            "Boolean Type",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/02 Variables.ipynb": [
            "Variable Assignment",
            "Variable Types in Python",
            "Variable Names",
            "PEP 8",
            "Reserved Words (Keywords)",
            "Constants in Python",
            "Naming Convention",
            "Conclusion",
            "Practice Exercises"
        ],
        "downloaded_files/Lectures/04 Data Types/03 Conversion Between Data Types.ipynb": [
            "Introduction",
            "Types of Type Conversion in Python",
            "Python Implicit Type Conversion",
            "Python Explicit Type Conversion (Typecasting)",
            "Key Points to Remember"
        ],
        "downloaded_files/Lectures/04 Data Types/04 Operators and Expresssions.ipynb": [
            "Basic Arithmetic Operators",
            "Comparison Operators",
            "Logical Operators",
            "Assignment Operators",
            "Membership Operators",
            "(Optional) Bitwise Operators",
            "Operator Precedence and Associativity",
            "Operator Precedence",
            "Associativity",
            "Building Complex Expressions",
            "1. Start Simple",
            "2 Use Parentheses",
            "Avoid Overcomplicating",
            "Use Descriptive Variable Names",
            "Test Each Part",
            "Comment Your Code",
            "Stay Updated with Language Features",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/05 Objects in Python.ipynb": [
            "Diving into Object References",
            "What is a reference?",
            "How variables reference objects",
            "Exploring Object Identity",
            "The `id()` function and its significance",
            "Using the `is` keyword",
            "Difference between `is` and `==`",
            "Common Pitfalls and Best Practices",
            "Confusing `is` with `==`",
            "Not Understanding Variable References",
            "Conclusion and Key Takeaways"
        ],
        "downloaded_files/Lectures/04 Data Types/06 Strings.ipynb": [
            "Why are Strings Important?",
            "What is a string?",
            "Creating and Assigning Strings in Python",
            "Multiline Strings"
        ],
        "downloaded_files/Lectures/04 Data Types/07 Basic String Operations.ipynb": [
            "Concatenating Strings",
            "Replicating Strings using Repetition",
            "Checking for Substrings with `in`",
            "Finding the Length of a String with `len()`",
            "Accessing Characters using Indexing",
            "String Slicing",
            "Specifying a Stride in a String Slice"
        ],
        "downloaded_files/Lectures/04 Data Types/08 String Methods.ipynb": [
            "Introduction to Objects",
            "Introduction to Methods",
            "String Methods",
            "Changing Case",
            "Checking String Characteristics",
            "Searching and Replacing",
            "Stripping Whitespaces",
            "Splitting",
            "Understanding the Immutability of Strings",
            "So, How Do We 'Change' Strings?"
        ],
        "downloaded_files/Lectures/04 Data Types/09 Basics of Input and Output.ipynb": [
            "Reading Input From the Keyboard",
            "The `input()` Function",
            "Writing Output to the Console",
            "The Basic `print()` Function"
        ],
        "downloaded_files/Lectures/04 Data Types/10 String Formatting.ipynb": [
            "Introduction to String Formatting",
            "The `.format()` Method",
            "Introducing f-strings",
            "Comparing .format() and f-strings",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/11 Escape Sequences and Raw Strings.ipynb": [
            "Escape Sequences",
            "Raw Strings",
            "Practical Example: File Paths",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/13 Lists.ipynb": [
            "Creating Lists",
            "Syntax for List Creation",
            "Creating Empty Lists",
            "Lists From Other Data Types",
            "Creating Lists with `*` Operator",
            "Creating Lists with Range",
            "Using Built-in Functions with Lists",
            "`len()`",
            "`max()` and `min()`",
            "`sum()`",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/14 Accessing and Modifying List Elements.ipynb": [
            "Accessing Elements Using Indexing",
            "Accessing Elements Using Slicing",
            "Updating Elements",
            "Adding Elements to a List",
            "Removing Elements",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/15 Common List Operations.ipynb": [
            "List Concatenation and Replication",
            "Membership Testing",
            "Finding the Index of an Element",
            "Counting the Number of Occurrences of an Element",
            "Reversing the Order of a List",
            "Sorting a List",
            "Conclusion",
            "Summary",
            "Practice Exercises",
            "Exercise 1: Create and Modify List",
            "Exercise 2: Access and Slice",
            "Exercise 3: List Membership Testing",
            "Exercise 4: Concatenation and Repetition",
            "Exercise 5: Iterating and Counting"
        ],
        "downloaded_files/Lectures/04 Data Types/16 Tuples.ipynb": [
            "Creating and Accessing Tuples",
            "Creating Tuples",
            "Accessing Tuple Elements",
            "Indexing",
            "Slicing",
            "Immutability of Tuples",
            "Understanding Immutability",
            "Putting Immutability to Work",
            "Operations on Tuples",
            "Concatenation",
            "Repetition",
            "Membership Testing",
            "Count and Index Methods",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/17 Dictionary.ipynb": [
            "Characteristics of Python Dictionaries",
            "Dictionaries vs Lists",
            "Why Use Dictionaries?",
            "Creating Dictionaries in Python",
            "Basic Syntax for Dictionary Creation",
            "Empty Dictionary",
            "Dictionary Initialization with Values",
            "Using `dict()` Constructor",
            "A Note on Keys",
            "Conclusion"
        ],
        "downloaded_files/Lectures/04 Data Types/18 Accessing and Modifying Dictionary.ipynb": [
            "Accessing Dictionary Values in Python",
            "Accessing Values Using Keys",
            "Handling Missing Keys with .get()",
            "Using .get() Without a Default Value",
            "Accessing All Keys or Values",
            "Conclusion",
            "Adding and Updating Dictionary Items in Python",
            "Adding New Key-Value Pairs",
            "Updating Existing Values",
            "Using the `.update()` Method",
            "Conclusion",
            "Removing Items from a Dictionary in Python",
            "Using the `del` Statement",
            "Using the `.pop()` Method",
            "Using the `.popitem()` Method",
            "Clearing All Items",
            "Conclusion",
            "Practice Exercise"
        ],
        "downloaded_files/Lectures/04 Data Types/19 Dictionary Manipulation and Practical Uses.ipynb": [
            "Dictionary Operators",
            "Membership Operator (`in` and `not in`)",
            "Concatenation Operator",
            "Multiplication Operator",
            "Dict Methods and Functions",
            "`.keys()` Method",
            "`.values()` Method",
            "`.items()` Method",
            "`.get()` Method",
            "`.update()` Method",
            "`.pop()` Method",
            "`.popitem()` Method",
            "`.clear()` Method",
            "`.setdefault()` Method",
            "`len()` Function",
            "`sorted()` Function",
            "Nested Dictionaries in Python",
            "Understanding Nested Dictionaries",
            "Accessing Items in a Nested Dictionary",
            "Modifying Nested Dictionary Values",
            "Adding New Items to a Nested Dictionary",
            "Working with Deeply Nested Dictionaries",
            "Conclusion",
            "Practice Exercise"
        ],
        "downloaded_files/Lectures/04 Data Types/20 Sets.ipynb": [
            "Creating Sets in Python",
            "Set Creation Syntax",
            "Creating an Empty Set",
            "Creating a Set from an Iterable",
            "Sets from Strings",
            "Handling Duplicates",
            "Conclusion",
            "Accessing Set Elements in Python",
            "Membership Testing",
            "Accessing Elements Indirectly",
            "Conclusion",
            "Adding and Updating Sets in Python",
            "Adding Elements to a Set",
            "The Uniqueness Constraint",
            "Updating a Set with Multiple Elements",
            "Duplicates in `.update()`",
            "Using `|=`",
            "Conclusion",
            "Removing Items from a Set in Python",
            "Using `.remove()` Method",
            "Using `.discard()` Method",
            "Using `.pop()` Method",
            "Clearing a Set",
            "Conclusion",
            "A Note on Set Elements Limitation",
            "Summary and Exercise"
        ],
        "downloaded_files/Lectures/04 Data Types/21 Set Operations.ipynb": [
            "Set Operations Basics",
            "Union",
            "Intersection",
            "Difference",
            "Symmetric Difference",
            "Subset, Superset, and Disjoint",
            "Conclusion",
            "Differences Between Set Methods and Set Operators",
            "Union: `|` vs. `.union()`",
            "Intersection: `&` vs. `.intersection()`",
            "Difference: `-` vs. `.difference()`",
            "Symmetric Difference: `^` vs. `.symmetric_difference()`",
            "Considerations for Choice",
            "Conclusion",
            "Practice Exercise"
        ],
        "downloaded_files/Lectures/04 Data Types/22 Frozensets.ipynb": [
            "Creating Frozen Sets in Python",
            "Syntax for Creating a `frozenset`",
            "Converting Other Iterables into Frozen Sets",
            "Unique Elements in Frozen Sets",
            "Immutable Sets vs. Mutable Sets",
            "Conclusion",
            "Accessing Frozen Set Elements",
            "Membership Testing",
            "Unordered Nature",
            "Conversion to Ordered Sequence",
            "Conclusion",
            "Operations on Frozen Sets in Python",
            "Immutable Nature and Implications",
            "Set Operations with `frozenset`",
            "Using Operators with `frozenset`",
            "Combining `frozenset` with Other Sets",
            "Immutable Results",
            "Conclusion",
            "Practical Applications of Frozen Sets",
            "Frozen Sets as Dictionary Keys",
            "Frozen Sets in Other Data Structures",
            "Frozen Sets for Constant Set Definitions",
            "Frozen Sets for Safe Data Sharing",
            "Conclusion",
            "Performance Considerations for Frozen Sets",
            "Conclusion",
            "Conclusion",
            "Practice Exercise"
        ],
        "downloaded_files/Lectures/04 Data Types/23 Packing and Unpacking.ipynb": [
            "Introduction to Packing and Unpacking",
            "Packing in Python",
            "Unpacking in Python",
            "Unpacking Sequences",
            "Unpacking Tuples",
            "Unpacking Lists",
            "Extended Unpacking in Python 3",
            "The `*` Operator in Unpacking",
            "Using `*` with Lists",
            "Unpacking Dictionaries",
            "The `**` Operator and Dictionaries",
            "Unpacking Keys",
            "Best Practices and Common Pitfalls",
            "Best Practices",
            "Common Pitfalls",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/05 Code Structure and Syntax/01 Introduction.ipynb": [
            "Python Syntax Overview",
            "Simple Statements",
            "Compound Statements",
            "Code Blocks and Indentation",
            "Executing Python Scripts",
            "The Importance of Readability"
        ],
        "downloaded_files/Lectures/05 Code Structure and Syntax/02 Line Continuation.ipynb": [
            "Implicit Line Continuation",
            "Explicit Line Continuation",
            "Multiple Statements Per Line"
        ],
        "downloaded_files/Lectures/05 Code Structure and Syntax/03 Comments.ipynb": [
            "Using Comments Effectively",
            "Single-Line Comments",
            "Inline Comments",
            "Commenting Out Code",
            "Multi-Line Comments",
            "Docstrings",
            "Best Practices for Writing Comments"
        ],
        "downloaded_files/Lectures/05 Code Structure and Syntax/04 Whitespace and Indentation.ipynb": [
            "Separating Tokens with Whitespace",
            "Whitespace Requirements",
            "Comments and Whitespace",
            "Indentation",
            "Whitespace Best Practices"
        ],
        "downloaded_files/Lectures/06 Control Structures/01 Introduction to Control Structures.ipynb": [
            "Sequential Control Structure",
            "Selection Control Structures",
            "The `if` Statement",
            "The `else` and `elif` Statements",
            "Nested Conditionals",
            "Iteration Control Structures",
            "The `for` Loop",
            "The `while` Loop",
            "Conclusion"
        ],
        "downloaded_files/Lectures/06 Control Structures/02 Conditional Statements.ipynb": [
            "The `if` Statement",
            "The `else` Statement",
            "The `elif` Statement",
            "Understanding Truthy and Falsy Values in Python",
            "What is Evaluated as `False`?",
            "Nested Conditional Statements",
            "Conditional Expressions (Ternary Operator)",
            "Best Practices",
            "Conclusion",
            "Exercise: Basic Movie Ticket Pricing",
            "Solution"
        ],
        "downloaded_files/Lectures/06 Control Structures/03 for Loops.ipynb": [
            "Definite Iteration in Programming",
            "Numeric Range Loop",
            "Three-Expression Loop",
            "Collection-Based or Iterator-Based Loop",
            "The `for` Loop in Python",
            "Iterating Over Sequences",
            "Lists",
            "Tuples",
            "Dictionaries",
            "Sets",
            "Strings",
            "Using `range()`",
            "Additional Functions in For Loops",
            "The `enumerate()` Function",
            "The `sorted()` Function",
            "Nested Loops",
            "Conclusion",
            "Exercise: Processing and Analyzing Temperature Data",
            "Solution"
        ],
        "downloaded_files/Lectures/06 Control Structures/04 while Loops.ipynb": [
            "Writing `while` Loops with a Control Condition",
            "Infinite Loops and How to Avoid Them",
            "Nested `while` Loops",
            "Conclusion",
            "Exercise: Tracking a Savings Goal with While Loops",
            "Solution"
        ],
        "downloaded_files/Lectures/06 Control Structures/05 Loop Control Statements.ipynb": [
            "Loop Control Statements",
            "The `break` Statement",
            "The `continue` Statement",
            "The `pass` Statement",
            "Best Practices",
            "Conclusion",
            "Exercise: Controlling Loop Execution with `break`, `continue`, and `pass`",
            "Solution"
        ],
        "downloaded_files/Lectures/06 Control Structures/06 Comprehensions.ipynb": [
            "List Comprehensions",
            "Set Comprehensions",
            "Dictionary Comprehensions",
            "Best Practices and Pitfalls",
            "When to Use and When Not to Use Comprehensions",
            "Keeping Comprehensions Readable and Maintainable",
            "Exercise: Transforming and Filtering Data with Comprehensions",
            "Solution",
            "Exercise: Mastering Comprehensions in Python",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/01 Introduction to Functions.ipynb": [
            "What is a Function?",
            "The Importance of Python Functions",
            "Abstraction and Reusability",
            "Modularity",
            "Namespace Separation",
            "Creating Your First Function",
            "Function Definition Syntax",
            "Function Calling Syntax",
            "Your First Function",
            "Using Parameters",
            "Placeholder Functions with `pass`"
        ],
        "downloaded_files/Lectures/07 Functions/02 Defining and Calling Functions.ipynb": [
            "What is a Function?",
            "The DRY Principle",
            "Defining a Function",
            "Syntax of Defining a Function",
            "Naming Conventions for Functions",
            "Creating a Simple Function Example",
            "Calling a Function",
            "Flow of Execution When a Function is Called",
            "Parameters and Arguments",
            "The `return` Statement",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/03 Argument Passing.ipynb": [
            "Positional Arguments",
            "Keyword Arguments",
            "Default Parameters",
            "Best Practices for Function Arguments in Python",
            "Positional Arguments",
            "Keyword Arguments",
            "Default Parameters",
            "Practice Exercise: A Day at the Zoo",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/04 Function Return Values.ipynb": [
            "Returning Data to the Caller",
            "Returning a Single Value",
            "Returning Multiple Values",
            "Default Return Value",
            "Printing vs. Returning a Value",
            "Exiting a Function",
            "Immediate Exit with `return`",
            "Using `return` for Control Flow",
            "Functions with Multiple Return Statements",
            "Best Practices and Common Mistakes",
            "Practice Exercise: Temperature Conversion Tool with Data Validation",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/05 Variable-Length Argument.ipynb": [
            "Argument Tuple Packing",
            "Argument Tuple Unpacking",
            "Unpacking Various Iterable Types",
            "Combining Packing and Unpacking",
            "Argument Dictionary Packing",
            "Combining with Positional Arguments",
            "Argument Dictionary Unpacking",
            "Best Practices and Common Mistakes",
            "Argument Tuple Packing",
            "Argument Tuple Unpacking",
            "Argument Dictionary Packing",
            "Argument Dictionary Unpacking",
            "Practice Exercise: Organizing a Coding Workshop",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/06 Function Documentation.ipynb": [
            "The Importance of Documenting Functions",
            "Docstrings: The Basics",
            "Writing Effective Docstrings",
            "Style",
            "Example",
            "Accessing Docstrings",
            "Using the help() Function",
            "Using the .__doc__ Attribute",
            "Practical Example",
            "Interactive Environments",
            "Docstring Styles",
            "Google Style",
            "NumPy/SciPy Style",
            "reStructuredText (reST)",
            "Epytext",
            "Choosing a Style",
            "Annotations and Type Hints",
            "Syntax",
            "Benefits",
            "Using Type Hints with Docstrings",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/07 Lambda Functions.ipynb": [
            "Understanding Lambda Functions",
            "What Are Lambda Functions?",
            "The Syntax of Lambda Functions",
            "When to Use Lambda Functions",
            "Appropriate Use Cases for Lambda Functions",
            "Limitations of Lambda Functions",
            "Writing Lambda Functions",
            "Basic Examples of Lambda Functions",
            "Lambda Functions with Different Numbers of Arguments",
            "Lambda Functions with Built-in Functions",
            "Using Lambda Functions with `filter()`",
            "Using Lambda Functions with `map()`",
            "Best Practices for Lambda Functions",
            "When to Use and When to Avoid Lambda Functions",
            "Readability and Maintenance Considerations",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/07 Functions/08 Built-in Functions.ipynb": [
            "Common Types of Built-in Functions",
            "Numeric Functions",
            "String Functions",
            "Iteration Functions",
            "Best Practices When Using Built-in Functions",
            "Efficiency Considerations",
            "Readability and Maintainability",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/08 File Handling/01 Introduction to File Handling.ipynb": [
            "What are files?",
            "Text Files",
            "Binary Files",
            "Why is file handling important?",
            "Basic file handling operations",
            "Open",
            "Read",
            "Write",
            "Close",
            "Opening a file in Python",
            "The `open()` function and its modes",
            "Code examples showing how to open files in different modes",
            "Text files vs. binary files",
            "Use cases for each type",
            "The importance of closing files and using `with` statements for safety",
            "Introduction to the `with` statement and context managers",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/08 File Handling/02 Reading from Files.ipynb": [
            "Opening Files for Reading ('r' mode)",
            "How to Open a File Using `open()`",
            "The `read()`, `readline()`, and `readlines()` Methods",
            "The `read()` Method",
            "The `readline()` Method",
            "The `readlines()` Method",
            "Iterating Over File Objects Line by Line",
            "Efficiency Benefits",
            "Working with File Paths (Absolute vs. Relative)",
            "Understanding File Paths",
            "Platform-Independent File Paths",
            "Exercise: Exploring File Reading Techniques in Python",
            "Solution"
        ],
        "downloaded_files/Lectures/08 File Handling/03 Writing to Files.ipynb": [
            "Opening Files for Writing",
            "Using `open()` to Create File Objects for Writing",
            "The Difference Between Writing to a New File vs. an Existing File",
            "The `write()` Method",
            "The Concept of Strings and How They Are Written to Files",
            "The `writelines()` Method",
            "The Difference between `write()` and `writelines()`",
            "Truncating and Overwriting vs. Appending",
            "Append to the End of a File with Mode `'a'`",
            "Potential Risks of Overwriting Data and How to Prevent It",
            "File Buffering and Flushing",
            "Practical Examples",
            "Example: Writing Log Data to a File",
            "Example: Generating and Saving a Report",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/01 Programming Paradigms.ipynb": [
            "Programming Paradigm Overview",
            "What is a Programming Paradigm?",
            "What a Programming Paradigm is Not",
            "Imperative Programming Paradigm",
            "Procedural Programming",
            "Object-Oriented Programming (OOP)",
            "Declarative Programming Paradigm",
            "Functional Programming",
            "Logic Programming",
            "Database Querying",
            "Comparing Programming Paradigms",
            "Imperative Programming",
            "Declarative Programming",
            "Declarative: Functional Programming",
            "Imperative: Object-Oriented Programming",
            "Guidelines on Choosing the Appropriate Paradigm",
            "Conclusion"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/02 Introduction to Object Oriented Programming.ipynb": [
            "Core Concepts of OOP",
            "Classes and Objects",
            "Attributes and Methods",
            "Encapsulation",
            "Inheritance",
            "Polymorphism",
            "Abstraction",
            "Advantages and Disadvantages of OOP",
            "Conclusion"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/03 OOP in Python.ipynb": [
            "Basic Concepts of OOP in Python",
            "What is a Class?",
            "What is an Object?",
            "Simple Class Creation Example in Python",
            "Instantiating Objects from a Class",
            "Key Features of Python OOP",
            "Encapsulation",
            "Inheritance",
            "Polymorphism",
            "Abstraction",
            "Practical Example: Car Class",
            "Instantiating an Object and Calling its Method:",
            "Conclusion",
            "Major Takeaways",
            "Looking Ahead"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/04 Classes and Objects.ipynb": [
            "Defining a Simple Class in Python",
            "Introducing  Methods",
            "Instantiate an Object from the Class",
            "Clarifying the Necessity of Passing `obj` to Methods",
            "Instance Methods and the Use of `self`",
            "Understanding `self`",
            "Practical Code Examples Using `self`",
            "Why `self` is Necessary",
            "The Role of `__init__` Method in Python Classes",
            "Modifying the Car Class to Include the `__init__` Method",
            "Classes vs. Instances Attributes",
            "Class Attributes",
            "Instance Attributes",
            "Instantiating Objects",
            "Creating Objects from a Class",
            "Accessing Attributes and Invoking Methods",
            "Maintaining Unique State",
            "Practical Example: Enhancing the Car Class",
            "Exercise: Building and Enhancing a `Book` Class",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/05 the __init__ Method.ipynb": [
            "Anatomy of the `__init__` Method",
            "Basic Syntax and Structure",
            "The Significance of the `self` Parameter",
            "Parameters and Arguments in `__init__`",
            "Initializing Object Attributes with `__init__`",
            "Practical Example",
            "Exercise: Building and Initializing a Classroom",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/06 OOP Feature: Inheritance.ipynb": [
            "The Basics of Inheriting Classes",
            "Adding and Overriding Methods",
            "The `super()` Function and Method Overriding",
            "Exercise: Crafting an Employee Inheritance Structure",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/07 Types of Inheritance.ipynb": [
            "Single Inheritance: Basics and Benefits",
            "Multilevel Inheritance: Advantages and Challenges",
            "Hierarchical Inheritance: Structure and Scenarios",
            "Multiple Inheritance: Concepts and Complexities (Optional)",
            "Exercise: Exploring Inheritance in Python",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/08 Object Relationships.ipynb": [
            "Association in Object-Oriented Programming",
            "Example 1: The Doctor and Stethoscope Relationship",
            "Example 2: The Owner and Dog Relationship",
            "Aggregation: Understanding \"Whole-Part\" Relationships",
            "Example: The Team and Player Relationship",
            "Example: The Dog and Its Collar Relationship",
            "Composition: Navigating Strong \"Whole-Part\" Relationships",
            "How Composition Differs from Aggregation",
            "Example: The Computer, Processor, Memory, and HardDrive Relationship",
            "Additional Example: The Dog and Its Tail",
            "Inheritance: Building Hierarchies in OOP",
            "Example: The Pet and Dog Hierarchical Relationship",
            "Inheritance vs. Association: Clarifying the Distinctions",
            "Practical Applications of Relationship Types: When to Use Association, Aggregation, Composition, and Inheritance",
            "When to Use Association",
            "When to Use Aggregation",
            "When to Use Composition",
            "When to Use Inheritance",
            "Decision Making",
            "Designing with Object Relationships",
            "Best Practices for Implementing OOP Relationships",
            "Avoiding Common Pitfalls in Designing Relationships",
            "Exercise: Implementing Object Relationships in a Zoological Simulation",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/09 OOP Feature: Polymorphism.ipynb": [
            "Implementing Polymorphism in Inheritance",
            "Dynamic Typing and Polymorphic Behavior",
            "Dynamic Typing in Action",
            "Advantages and Pitfalls of Dynamic Typing and Polymorphism",
            "Exercise: Polymorphism and Dynamic Typing in Python",
            "Solution"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/10 OOP Feature: Encapsulation.ipynb": [
            "The Foundations of Encapsulation",
            "Public Attributes and Methods",
            "Defining and Accessing Public Members in Python",
            "Protected Attributes and Methods",
            "Defining and Accessing Protected Members in Python",
            "Private Attributes and Methods",
            "Defining and Accessing Private Members in Python",
            "Summary",
            "Name Mangling in Python",
            "Practical Examples: Modifying Access to Class Members",
            "A Simple Class Example: A Blog Post System",
            "Choosing the Appropriate Access Level",
            "Advantages of Using Access Modifiers"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/11 OOP Feature: Abstract Base Classes.ipynb": [
            "How to Define Abstract Base Classes",
            "Using the `abc` Module",
            "The ABC Module and Its Importance",
            "Enhancing Code Reliability and Maintainability",
            "Real-world Applications",
            "Implementing Interfaces through Abstract Classes",
            "How to Implement an Interface using an Abstract Class",
            "Example: A Payment Processor Interface",
            "Practical Applications and Limitations of Abstract Base Classes and Interfaces",
            "Practical Applications",
            "Limitations",
            "Best Practices",
            "Conclusion"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/12 Overriding.ipynb": [
            "Basic Example of Method Overriding",
            "The `super()` Function",
            "Example 1: Extending Functionality with `super()`",
            "Example 2: Using `super()` in the `__init__` Method",
            "Overriding Special Methods",
            "Overriding `__str__` for Custom String Representation",
            "Overriding `__repr__` for Unambiguous Representations",
            "Overriding `__eq__` for Custom Equality Checking",
            "Customizing Behavior of Built-in Operations and Functions",
            "Method Overriding Best Practices",
            "When to Use Method Overriding",
            "Best Practices",
            "Common Pitfalls"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/13 The Magic Methods.ipynb": [
            "Representing Objects as Strings: `__str__` and `__repr__`",
            "`__str__`: User-Friendly String Representation",
            "`__repr__`: Unambiguous Representation for Debugging",
            "Getting the Length of an Object: `__len__`",
            "Numeric Operations Magic Methods: Enabling Arithmetic in Custom Objects",
            "Arithmetic Magic Methods Overview",
            "Example: Implementing Arithmetic Operations in a Custom Class",
            "Comparison Magic Methods: Enabling Rich Comparisons Between Objects",
            "Equality and Inequality: `__eq__` and `__ne__`",
            "Ordering: `__lt__`, `__le__`, `__gt__`, `__ge__`",
            "Object Initialization and Destruction: `__init__` and `__del__` Magic Methods",
            "`__init__`: Initializing Objects",
            "`__del__`: Cleaning Up Objects",
            "Emulating Container Types: `__getitem__` and `__setitem__`",
            "`__getitem__`: Accessing Items",
            "`__setitem__`: Setting Items",
            "Making Objects Callable: `__call__`"
        ],
        "downloaded_files/Lectures/09 Object Oriented Programming/14 Static and Class Methods.ipynb": [
            "Instance Methods",
            "Static Methods",
            "Syntax",
            "Practical Exercise: Enhance a Class by Integrating a Static Method",
            "Understanding Class Methods",
            "Syntax",
            "Practical Exercise: Implement a Class Method to Modify Class State",
            "Comparison between Instance, Static, and Class Methods",
            "When to Use Each Type",
            "Key Differences in Their Signatures and Effects",
            "Real-world Application Scenarios"
        ],
        "downloaded_files/Lectures/10 Modular Programming/-- 07 Debugging Techniques in VSCode.ipynb": [
            "Setting Up VSCode for Python Debugging",
            "Debugger Extensions",
            "Configuring Python Interpreter",
            "User Interface Overview",
            "Verifying Your Setup",
            "Starting Your Debugging Journey",
            "Run and Debug View",
            "Run Menu",
            "Launch Configurations",
            "Starting a Debug Session",
            "Debug Console",
            "Essential Debugging Techniques",
            "Breakpoints",
            "Data Inspection",
            "Using the Call Stack",
            "Summary of Basic Debugging Techniques"
        ],
        "downloaded_files/Lectures/10 Modular Programming/01 Limitations of Jupyter Notebooks.ipynb": [
            "The Power and Popularity of Jupyter Notebooks",
            "Interactive Computing",
            "Data Visualization",
            "Ease of Use",
            "Collaboration and Sharing",
            "Limitations of Jupyter Notebooks",
            "Non-linear Execution",
            "Version Control Challenges",
            "Limited IDE Features",
            "Encouragement of Poor Coding Practices",
            "Scalability Issues",
            "Limited Support for Software Engineering Best Practices",
            "The Need for Modular Programming",
            "Code Organization and Readability",
            "Reusability",
            "Collaboration",
            "Maintainability and Debugging",
            "Testing",
            "Preparation for Real-world Development",
            "Scalability",
            "Transitioning from Notebooks to Modular Programming",
            "Identifying When to Make the Switch",
            "Steps to Modularize Notebook Code",
            "Example: From Notebook to Module",
            "Conclusion"
        ],
        "downloaded_files/Lectures/10 Modular Programming/02 Modular Programming.ipynb": [
            "What is Modular Programming?",
            "Key Concepts in Modular Programming",
            "Modules",
            "Information Hiding",
            "Loose Coupling",
            "Maintainability",
            "Separation of Concerns",
            "Namespace Management",
            "Documentation",
            "Scalability",
            "Modular Programming in Python",
            "Python Modules",
            "Packages in Python",
            "Namespace Management",
            "Relative Imports",
            "Module Search Path",
            "Conclusion"
        ],
        "downloaded_files/Lectures/10 Modular Programming/03 Creating and Importing Modules.ipynb": [
            "What is a Module?",
            "Examples of Modules:",
            "Creating a Module",
            "Basic Module Structure",
            "Module Naming Conventions",
            "Module Contents",
            "Documenting Your Module",
            "Importing Modules",
            "Basic Import Statement",
            "From Import Statement",
            "Import as Statement",
            "Importing All Names (*)",
            "Best Practices for Importing",
            "Modules vs. Scripts: Making Modules Executable",
            "Modules vs. Scripts",
            "Making Modules Executable",
            "Benefits of This Approach",
            "Example Usage",
            "Best Practices",
            "Organizing Module Contents",
            "Using if __name__ == \"__main__\"",
            "Documenting Your Module",
            "Import Best Practices",
            "Common Built-in Modules",
            "os - Operating System Interface",
            "sys - System-specific Parameters and Functions",
            "datetime - Basic Date and Time Types",
            "math - Mathematical Functions",
            "random - Generate Pseudo-random Numbers",
            "re - Regular Expression Operations",
            "collections - Container Datatypes",
            "Conclusion"
        ],
        "downloaded_files/Lectures/10 Modular Programming/04 The Python Module Search Path.ipynb": [
            "Understanding Python's Import System",
            "The Module Search Path",
            "Default Search Path",
            "Viewing the Current Search Path",
            "Modifying the Module Search Path",
            "Using `PYTHONPATH` Environment Variable",
            "Modifying `sys.path` at Runtime",
            "Using `.pth` Files",
            "Best Practices for Modifying the Search Path",
            "Working with Virtual Environments",
            "Impact on Module Search Path",
            "Creating and Using Virtual Environments",
            "Viewing the Modified Search Path",
            "Best Practices for Virtual Environments",
            "Debugging Import Issues",
            "Techniques for Troubleshooting",
            "Advanced Debugging Techniques",
            "Conclusion"
        ],
        "downloaded_files/Lectures/10 Modular Programming/05 Creating and Using Packages.ipynb": [
            "What is a Package in Python?",
            "Package Structure",
            "Benefits of Using Packages",
            "Creating a Package",
            "Subpackage",
            "Creating Package Modules",
            "Putting It All Together",
            "Using Packages",
            "Importing from Packages",
            "Relative vs Absolute Imports",
            "Importing Specific Functions or Classes",
            "Handling Subpackages",
            "Using `__all__`",
            "Best Practices for Using Packages",
            "Example: Using Our Math Package",
            "Best Practices for Package Design",
            "Naming Conventions",
            "Structure and Organization",
            "Documentation",
            "Error Handling",
            "Version Control",
            "Testing",
            "Common Python Packages",
            "Data Science and Machine Learning",
            "Web Development",
            "Data Visualization",
            "Network and Internet",
            "Utility and Productivity",
            "How to Find and Choose Packages",
            "Conclusion"
        ],
        "downloaded_files/Lectures/10 Modular Programming/06 Common Issues in Python Packages.ipynb": [
            "Relative Import Issues",
            "\"ValueError: attempted relative import beyond top-level package\"",
            "\"ImportError: attempted relative import with no known parent package\"",
            "\"SystemError: Parent module '' not loaded, cannot perform relative import\"",
            "Best Practices for Handling Relative Imports",
            "Absolute Import Issues",
            "\"ModuleNotFoundError: No module named 'mymodule'\"",
            "Circular Import Problems",
            "Handling Optional Dependencies",
            "Package Structure and Import Confusion",
            "Flat vs Nested Package Structures",
            "Absolute vs Relative Imports Within Packages",
            "Avoiding Common Pitfalls",
            "Environment and Path-Related Import Issues",
            "Virtual Environment Pitfalls",
            "`PYTHONPATH` and `sys.path` Manipulation",
            "Import Issues in Notebooks (Jupyter/IPython)",
            "Conclusion"
        ],
        "downloaded_files/Lectures/10 Modular Programming/07 Basics of Debugging in VSCode.ipynb": [
            "Setting Up VSCode for Python Debugging",
            "Installing VSCode",
            "Installing the Python Extension",
            "Configuring the Python Interpreter",
            "Setting Up a Python Project",
            "Configuring Debug Settings",
            "Verifying the Setup",
            "Common Pitfalls",
            "Understanding the Debug View",
            "Accessing the Debug View",
            "Debug Toolbar",
            "Variables Pane",
            "Watch Pane",
            "Call Stack",
            "Breakpoints Pane",
            "Debug Console",
            "Customizing the Debug View",
            "Common Pitfalls",
            "Setting and Managing Breakpoints",
            "Setting Line Breakpoints",
            "Managing Breakpoints",
            "Best Practices for Using Breakpoints",
            "Common Pitfalls",
            "Basic Debugging Operations",
            "Starting and Stopping Debugging",
            "Step Over (F10)",
            "Step Into (F11)",
            "Step Out (Shift+F11)",
            "Continue Execution (F5)",
            "Restart (Ctrl+Shift+F5)",
            "Run to Cursor",
            "Using the Debug Console",
            "Common Pitfalls",
            "Inspecting Variables and Expressions",
            "Hover Evaluation",
            "Using the Variables Pane",
            "Adding Expressions to the Watch Pane",
            "Modifying Variables During Debugging",
            "Using the Debug Console for Evaluation",
            "Data Visualizers",
            "Customizing Display Format",
            "Common Pitfalls",
            "Simple Debug Console Usage",
            "Evaluating Expressions",
            "Executing Statements",
            "Working with Variables",
            "Importing and Using Modules",
            "Multi-line Input",
            "Debugging Output",
            "Common Pitfalls and Best Practices",
            "Summary"
        ],
        "downloaded_files/Lectures/10 Modular Programming/08 Advanced Debugging Techniques in VSCode.ipynb": [
            "Advanced Breakpoint Techniques",
            "Function Breakpoints",
            "Data Breakpoints (Watchpoints)",
            "Hit Count Breakpoints",
            "Logpoints",
            "Conditional Breakpoints",
            "Best Practices and Considerations",
            "Working with the Call Stack",
            "Viewing the Call Stack in VSCode",
            "Navigating the Call Stack",
            "Using the Call Stack for Debugging",
            "Debugging External Libraries and Modules",
            "Stepping into External Code",
            "Navigating External Library Code",
            "Using the \"Just My Code\" Feature",
            "Balancing \"Just My Code\" and External Debugging",
            "Debugging Specific External Libraries",
            "Using Launch Configurations",
            "Creating a Basic Launch Configuration",
            "Customizing Launch Configurations",
            "Advanced Launch Configuration Features",
            "Best Practices for Launch Configurations",
            "Summary"
        ],
        "downloaded_files/Lectures/11 Advanced Topics/02 Grouping Statements.ipynb": [
            "The Importance of Indentation",
            "No Explicit Block Delimiters",
            "Nested Blocks",
            "The Debate Over Indentation",
            "Summary"
        ],
        "downloaded_files/Lectures/11 Advanced Topics/03 Function Arguments.ipynb": [
            "Positional Arguments",
            "Keyword Arguments",
            "Unpacking Arguments",
            "Unpacking Iterables with `*`",
            "Unpacking Dictionaries with `**`",
            "Best Practices for Using Function Arguments",
            "Descriptive Argument Names",
            "Use Keyword Arguments to Enhance Readability",
            "Consistent Ordering of Arguments",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/11 Advanced Topics/04 Function Parameters.ipynb": [
            "Types of Parameters",
            "Positional Parameters",
            "Keyword Parameters",
            "Default Parameters",
            "Variable-Length Parameters",
            "Best Practices for Using `*args` and `**kwargs`",
            "Mixing Different Types of Parameters",
            "Rules and Syntax for Mixing Parameter Types",
            "Practical Examples Demonstrating Mixed Parameter Types",
            "Best Practices for Defining Parameters",
            "Tips for Naming and Ordering Parameters",
            "Guidelines for Using Different Types of Parameters",
            "Examples",
            "Practice Exercise",
            "Tasks:",
            "Sample Calls and Expected Outputs:",
            "Solution"
        ],
        "downloaded_files/Lectures/11 Advanced Topics/05 Function Return Values.ipynb": [
            "Understanding the `return` Statement",
            "How the `return` Statement Affects the Function Execution and Program Flow",
            "Returning a Value",
            "Exiting a Function Early",
            "No `return` Statement",
            "Returning Values from a Function",
            "The Difference Between Printing a Value and Returning It",
            "Examples of Functions That Return Values",
            "Functions with Multiple `return` Statements",
            "Examples of Functions with Multiple Return Paths",
            "The Default `return` Value",
            "The Implicit `return None` Behavior of Functions",
            "Returning Multiple Values",
            "Using Tuples to Return Multiple Values",
            "Using Lists to Return Multiple Values",
            "Using Dictionaries to Return Multiple Values",
            "Best Practices for Using `return`",
            "Conclusion",
            "Practice Exercise",
            "Solution"
        ],
        "downloaded_files/Lectures/11 Advanced Topics/24 Copying Composite Data Types.ipynb": [
            "Assigning a List to Another Variable (Creating a Reference)",
            "Shallow Copy",
            "Using the `copy()` method",
            "Using the list constructor",
            "Using slicing",
            "Deep Copy",
            "Final Examples",
            "Example: Creating a reference",
            "Example: Shallow copy",
            "Example: Deep copy",
            "Conclusion"
        ]
    }
}